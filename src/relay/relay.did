type CanisterIncomingMessage = variant {
  IcWebSocketGatewayStatus : GatewayStatusMessage;
  IcWebSocketEstablished : vec nat8;
  DirectlyFromClient : DirectClientMessage;
  RelayedByGateway : RelayedClientMessage;
};
type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : vec nat8;
  tree : vec nat8;
};
type CanisterOutputMessage = record {
  key : text;
  content : vec nat8;
  client_key : vec nat8;
};
type CanisterWsCloseArguments = record { client_key : vec nat8 };
type CanisterWsGetMessagesArguments = record { nonce : nat64 };
type CanisterWsMessageArguments = record { msg : CanisterIncomingMessage };
type CanisterWsOpenResultValue = record {
  client_key : vec nat8;
  canister_id : principal;
  nonce : nat64;
};
type DirectClientMessage = record { client_key : vec nat8; message : vec nat8 };
type EventData = record {
  id : text;
  sig : text;
  content : text;
  kind : nat32;
  tags : vec vec text;
  pubkey : text;
  created_at : nat32;
};
type GatewayStatusMessage = record { status_index : nat64 };
type RelayedClientMessage = record { sig : vec nat8; content : vec nat8 };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : CanisterOutputCertifiedMessages; Err : text };
type Result_2 = variant { Ok : CanisterWsOpenResultValue; Err : text };
service : {
  add_new_event : (EventData) -> ();
  get_number_of_active_subscriptions : () -> (int32);
  get_owner : () -> (principal);
  set_owner : (principal) -> ();
  ws_close : (CanisterWsCloseArguments) -> (Result);
  ws_get_messages : (CanisterWsGetMessagesArguments) -> (Result_1);
  ws_message : (CanisterWsMessageArguments) -> (Result);
  ws_open : (RelayedClientMessage) -> (Result_2);
  ws_register : (CanisterWsCloseArguments) -> (Result);
}